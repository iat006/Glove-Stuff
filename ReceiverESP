/*
  test bluetooth connection for RECEIVER esp (connected to leonardo)
  chip is: ESP32-D0WD-V3
  MAC: e8:6b:ea:d0:c4:88
*/

#include <esp_now.h>
#include <WiFi.h>
#include <HardwareSerial.h>

#define RXD2 16
#define TXD2 17


// Structure example to receive data
// Must match the sender structure
typedef struct struct_message {
  float x;
  float y;

} struct_message ;
// Create a struct_message called message
struct_message message;



 
void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2);
  
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(OnDataRecv);
}
 
void loop() {
  

}

///////////////////////////////////////////////////////////////////////////////////////


// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&message, incomingData, sizeof(message));
  Serial.print("Bytes received: ");
  
  Serial.println(len);

  if(message.x > 4){
    Serial2.println("2"); // send left arrow command
    Serial2.println("");
    Serial.println("2: left");
    delay(1000);

     
  }


  else if(message.x < 0){
      Serial2.println("1"); // send right arrow command
      Serial2.println("");
      Serial.println("1: right");
      delay(1000);
    }
  

  
  else if(message.y > 4){
        Serial2.println("3"); // send esc command
        Serial2.println("");
        Serial.println("3: esc");
        delay(1000);
      
    } 
  else if (message.x == message.y){
    Serial2.println("0");
    Serial2.println("");
    Serial.println("0; wait");
    delay(1000);
  }
  
 
  Serial.println();


}
